<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Blog</title>
	<subtitle>My blog site.</subtitle>
	<link href="https://dariofad.github.io/blog/feed.xml" rel="self" type="application/atom+xml"/>
    <link href="https://dariofad.github.io/blog/"/>
	<updated>2022-12-16T00:00:00+00:00</updated>
	<id>https://dariofad.github.io/blog/feed.xml</id>
	<entry xml:lang="en">
		<title>A programmer&#x27;s approach to the JLPT N3</title>
		<published>2022-12-16T00:00:00+00:00</published>
		<updated>2022-12-16T00:00:00+00:00</updated>
        <summary>&lt;p&gt;In this post I&#x27;ll share my experience preparing for the JLPT as a programmer.&lt;&#x2F;p&gt;
</summary>
		<link href="https://dariofad.github.io/blog/2022-12-16/" type="text/html"/>
		<id>https://dariofad.github.io/blog/2022-12-16/</id>
		<content type="html">&lt;p&gt;In this post I&#x27;ll share my experience preparing for the JLPT as a programmer.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In early 2021 my interest for the Japanese culture has grown
steadily. A year later I realized that a good knowledge of the
language was required to improve my understanding. So, I started
studying. In the early months my study plan was non-existent, and my
approach quite disorganized. But over time, I realized that studying
the language was a pleasant activity, and it has become a hobby.
Meanwhile my goals and ambitions have evolved, and spending time in
Japan in the future is one of the entries on top of my todo list!
Thus, being able to understand the language to a certain degree is a
necessity.&lt;&#x2F;p&gt;
&lt;p&gt;The JLPT (Japanese Language Proficiency Test) is widely recognized as
the gold standard to attest one&#x27;s ability to comprehend Japanese. It
has five levels N5 to N1 (the highest), so it&#x27;s also a very good way
to measure one&#x27;s progress. I&#x27;m currently studying to reach the N3
level (roughly speaking, the &lt;em&gt;intermediate&lt;&#x2F;em&gt; level), and well, it takes
some time.&lt;&#x2F;p&gt;
&lt;p&gt;After taking the N3 exam on December (and likely failing it), I&#x27;d like
to share &lt;strong&gt;my experience&lt;&#x2F;strong&gt; as a full-time worker and self-study
learner.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;ll describe how I prepared for the test, explain the
choices I made, and how I tried to &lt;strong&gt;speed-up the process using
Emacs&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-bit-of-context&quot;&gt;A bit of context&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-bit-of-context&quot; aria-label=&quot;Anchor link for: a-bit-of-context&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before jumping into the details, I think it&#x27;s useful to share
some background info.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;about-me&quot;&gt;About me&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-me&quot; aria-label=&quot;Anchor link for: about-me&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I work full-time as a researcher (software&#x2F;security area), I have
never taken a Japanese course at university, and I&#x27;m building my
knowledge from scratch.  I started studying Japanese in early 2022,
using Duolingo to learn the basics of the language such as Hiragana,
Katakana and common kanji. Around March&#x2F;April I started studying with
Genki I and Genki II (only the textbooks, not the practice books) to
prepare for the JLPT N4. I attempted the N4 in July 2022, achieving 80
points over 180 (90 are required to pass).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;about-the-language&quot;&gt;About the language&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-the-language&quot; aria-label=&quot;Anchor link for: about-the-language&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you are not familiar with Japanese, there is something else you may
be interested to know. Japanese is very different from Romance and
Germanic languages. Just to mention some differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;in Japanese the subject is often omitted, and needs to be inferred
from the context. For example the sentence 食べる, may be translated
to &amp;quot;to eat&amp;quot;, &amp;quot;I&#x27;m eating&amp;quot;, or &amp;quot;As for them, eating&amp;quot;;&lt;&#x2F;li&gt;
&lt;li&gt;words are not typically written using a limited set of characters
(i.e., the alphabet), but are rather built grouping kanji. For
instance 食物, which means &amp;quot;food&amp;quot;, is formed by 食 (food, meal) and
物 (thing, article). There are thousands of kanji;&lt;&#x2F;li&gt;
&lt;li&gt;there are different levels of politeness, so something must be said
or written in the proper way depending on the role, age, or social
status of the parties involved. お待ち下さい and 待って both mean
&amp;quot;wait&amp;quot;, but the first is more formal and more gentle.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;about-the-jlpt&quot;&gt;About the JLPT&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-the-jlpt&quot; aria-label=&quot;Anchor link for: about-the-jlpt&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The JLPT can be quite difficult depending on the level. In general, it
is divided into three sections:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Language Knowledge (Vocabulary&#x2F;Grammar),&lt;&#x2F;li&gt;
&lt;li&gt;Reading,&lt;&#x2F;li&gt;
&lt;li&gt;and Listening.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To pass the exam, a minimum score for each section, along with a
minimum overall score must be achieved. &lt;&#x2F;p&gt;
&lt;p&gt;Each section has its own difficulties, like the ability to recall in
the Vocabulary, or the rapidity of the dialogue in the Listening. I
found particularly hard the sentence composition exercise in the
Grammar, in which a meaningful sentence must be constructed given 4
parts. The reason is that in Japanese there are many particles and
patterns, and the positioning of a particle can completely alter the
meaning of the whole sentence.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-the-goal-to-n3&quot;&gt;Set the goal to N3&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-the-goal-to-n3&quot; aria-label=&quot;Anchor link for: set-the-goal-to-n3&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;After taking the N4 exam in July, I was quite satisfied. Even though I
was aware I didn&#x27;t prepared it thoroughly, I was able to understand
many questions and large parts in the dialogues. So, regardless of the
outcome, I decided to step up to the N3 the following session, since
let&#x27;s be honest, N4 ability is pretty limited. I remember I thought
something like: &amp;quot;It will be hard, but what do I have to lose? My goal
is to reach the N1 level, eventually&amp;quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;book-and-first-difficulties&quot;&gt;Book and first difficulties&lt;a class=&quot;zola-anchor&quot; href=&quot;#book-and-first-difficulties&quot; aria-label=&quot;Anchor link for: book-and-first-difficulties&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Since I struggled with grammar during the N4 test, I decided to buy an
in-depth grammar book to prepare for the N3. After reading some online
blogs, I decided to go with the New Kanzen Master N3, and ended up
buying the complete set. The set comprises 5 books: Listening,
Grammar, Kanji, Reading Comprehension and Vocabulary. I took 2 weeks
off, then started studying around August. I was very happy with my
purchase, the quality of the book is astounding, to give an idea you
can find grammar notes like this one explaining the use of particles:
&lt;code&gt;After ~ (verb), suddenly notice ... (with slight surprise)&lt;&#x2F;code&gt;. However,
I also encountered the first difficulties; the books were quite
demanding and I didn&#x27;t know how to use them properly. As a
self-learner, I didn&#x27;t have the support of a teacher, and every time I
had a problem, I had to (try to) translate the content myself. I know
it may sound commonplace but, I couldn&#x27;t do this properly without a
desk and a PC. Basically, this meant I couldn&#x27;t study while commuting
or during the lunch break, I could only do it the early morning, after
dinner, or on Saturdays and Sundays. I had to find a smarter way of
studying.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exam-preparation&quot;&gt;Exam preparation&lt;a class=&quot;zola-anchor&quot; href=&quot;#exam-preparation&quot; aria-label=&quot;Anchor link for: exam-preparation&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing I did to improve the situation was calculating the
time I really had available. Given my study pace, there was no way I
could complete the Kanzen Master in time, so I carefully pondered the
chance of failing the test in December. My first decision was to
reduce the overall study material I had to process, so I put aside the
Reading Comprehension and Listening, and focused only on Kanji,
Vocabulary, and Grammar books. I don&#x27;t recommend doing this, as I
don&#x27;t recommend to shorten practice, but it is a reasonable compromise
if you no longer have the time you had when you were a student.&lt;&#x2F;p&gt;
&lt;p&gt;The second thing I did was taking a lot of notes. My approach was
risky and notes could have been reused for the second attempt (yeah, I
may had already realized). Notes are very convenient, plus they can be
consumed during breaks, on the smartphone, on the Kindle and so
on. Emacs has this package called &lt;strong&gt;Org Mode&lt;&#x2F;strong&gt;, which is very powerful
and I have been using a lot at work. To me, writing in Emacs with Org
Mode and my Ergodox Ez keyboard is truly fun and I tried to take
advantage of it (you may call it gamification).&lt;&#x2F;p&gt;
&lt;p&gt;The approach I was following was working, and I could track my
progress weekly, but there were unfruitful weeks. I think this
happened for two reasons: 1) it was a repetitive task, and not all the
evenings or weekends I was inclined to do it (interesting weekend
projects are a great source of distraction for a programmer), and 2) I
was staring at the monitor for too many hours, so my back and eyes
sometimes hurt.  The only way I found to solve this issue was taking
long strolls two to three times a week, and to stay productive during
this activity I started listening to the JapanesePod101 podcast. I
wish I added JapanesePod101 to my routine earlier, I find it so
effective, and also relaxing.&lt;&#x2F;p&gt;
&lt;p&gt;I also tried other methods like the Anki memorization app to utilize
short breaks and commute time. Many use Anki regularly, but for me it
didn&#x27;t work. I think flashcards are good to review stuff you have
already studied, but they are not as powerful as notes. With notes you
can add to each kanji useful info such as the meaning (kanji&#x27;s true
power), usage info, short passages, and so on. To me, reviewing
flashcards was just a boring activity.&lt;&#x2F;p&gt;
&lt;p&gt;But wait, what did I do concretely? What are the advantages in using
Emacs? And what a programmer can do to boost productivity?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;study-as-a-programmer&quot;&gt;Study as a programmer&lt;a class=&quot;zola-anchor&quot; href=&quot;#study-as-a-programmer&quot; aria-label=&quot;Anchor link for: study-as-a-programmer&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As explained in the previous section, my study was built on notes. But
what do I mean by that? What did I do to produce them efficiently with
Emacs?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-emacs-and-mozc&quot;&gt;Setup Emacs and Mozc&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup-emacs-and-mozc&quot; aria-label=&quot;Anchor link for: setup-emacs-and-mozc&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Well, let me go back just a moment. When you study Japanese you
encounter new kanji continuously. Each kanji has a precise meaning,
but can be characterized by many pronunciations. Books use Furigana to
support the student, a reading aid consisting of smaller Hiragana
characters printed either above or next to the new kanji. Now, if you
don&#x27;t know a kanji but know how to read it thanks to Furigana, you can
also write it on an electronic device, this means that you can look it
up quickly on a dictionary. So, even if you don&#x27;t have a Japanese
keyboard, the most important aspect to take notes rapidly is to be
able to write comfortably on the same document in English and in
Japanese (leveraging Furigana).&lt;&#x2F;p&gt;
&lt;p&gt;To do this you must first install the Japanese Language support
provided by your distro (in my case Ubuntu). Then you need a Japanese
Input Method Editor. The solution is Google&#x27;s &lt;strong&gt;Mozc&lt;&#x2F;strong&gt;.  To use Mozc
with Emacs you need to install &lt;code&gt;emacs-mozc&lt;&#x2F;code&gt;, a package that provides
the Elisp files to run Mozc server. Lastly, you need &lt;code&gt;mozc-mode&lt;&#x2F;code&gt;, the
minor mode to input Japanese text in Emacs. Since I use &lt;strong&gt;Ivy&lt;&#x2F;strong&gt;, a
generic completion fronted for Emacs, I find convenient to set the
&lt;code&gt;mozc-candidate-style&lt;&#x2F;code&gt; to &lt;code&gt;echo-area&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s my configuration with &lt;code&gt;use-package&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Lisp&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-Lisp &quot;&gt;&lt;code class=&quot;language-Lisp&quot; data-lang=&quot;Lisp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; input Japanese
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;use-package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mozc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  :ensure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  :config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; set kana map type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mozc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;keymap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;kana mozc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;keymap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;kana&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;101us)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; set overlay style to default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; mozc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;candidate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;style &amp;#39;echo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;area)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; toggle mozc mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key (kbd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&amp;lt;f7&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &amp;#39;mozc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mode)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see how to write Japanese and English on the same document with
Emacs.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;mozc-input.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As you can see from the animation, hitting &lt;code&gt;&amp;lt;f7&amp;gt;&lt;&#x2F;code&gt; starts the
&lt;code&gt;mozc-helper-process&lt;&#x2F;code&gt;, and subsequent input keys are immediately
converted into Hiragana. The Japanese sequence input is underlined by
the minor-mode, which simultaneously queries the Mozc server on the
background to get the proper completion candidates. Candidates are
shown in the echo area, the proper one can be selected with &lt;code&gt;TAB&lt;&#x2F;code&gt; or
via numeric input, and then inserted at point hitting &lt;code&gt;Enter&lt;&#x2F;code&gt;. Hitting
a second time &lt;code&gt;&amp;lt;f7&amp;gt;&lt;&#x2F;code&gt; toggles &lt;code&gt;mozc-mode&lt;&#x2F;code&gt;, and the subsequent text (&lt;code&gt;I eat apples&lt;&#x2F;code&gt;) is input using English letters.&lt;&#x2F;p&gt;
&lt;p&gt;To write English-origin words you need to use Katakana. To do that you
input Hiragana, then convert to Katakana using the
&lt;code&gt;japanese-katakana-region&lt;&#x2F;code&gt; function (as shown below).&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;katakana-region.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;taking-notes&quot;&gt;Taking notes&lt;a class=&quot;zola-anchor&quot; href=&quot;#taking-notes&quot; aria-label=&quot;Anchor link for: taking-notes&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Any software can be used to take notes, but none provide the
flexibility of Emacs. Emacs has built-in support for &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;Org
Mode&lt;&#x2F;a&gt;, a major mode for keeping notes,
maintaining to-do lists, writing computational notebooks, planning
projects, and many more. I think there are two key advantages in using
Org Mode over standard WYSIWYG editors like Microsoft Word: 1) you
work with plain text files rather than custom or proprietary formats,
and 2) Org Mode provides native support to convert your notes into
other representations like PDF and HTML. Point 1 is super important as
it allows you to use standard search programs like &lt;code&gt;grep&lt;&#x2F;code&gt; or &lt;code&gt;ag&lt;&#x2F;code&gt;
against your collection of documents. Point 2 can be leveraged to
display your notes on other devices, basically this permits to
transfer notes on the smartphone or on the Kindle, without
compromising readability (more on this later).&lt;&#x2F;p&gt;
&lt;p&gt;I relied heavily on tables while taking notes. To give you an example,
I used tables to associate the Chinese and Japanese reading to every
kanji, along with the actual meaning. Org mode has powerful table
editing support, providing functions such as auto-alignment when &lt;code&gt;TAB&lt;&#x2F;code&gt;
is hit, and in-cell content alignment via annotations. Also, it
provides functions to globally customize table font (see below).&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;org-table.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;productivity-tips&quot;&gt;Productivity tips&lt;a class=&quot;zola-anchor&quot; href=&quot;#productivity-tips&quot; aria-label=&quot;Anchor link for: productivity-tips&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Emacs provides many convenient little features to improve
productivity. Many are built-in, other can be implemented with simple
Elisp functions. Here I&#x27;ll show you some of them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Expand-region&lt;&#x2F;strong&gt;: a function to increase the selected region by
semantic units, a very convenient feature when you need to select text
blocks. I bound it to &lt;code&gt;C-=&lt;&#x2F;code&gt;. The gif shows what happens when the &lt;code&gt;C-=&lt;&#x2F;code&gt;
is hit repeatedly.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;expand-region.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Copy-from-point-to-end-of-line&lt;&#x2F;strong&gt;: a function to that copies the
content between the point and the end of the line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Lisp&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-Lisp &quot;&gt;&lt;code class=&quot;language-Lisp&quot; data-lang=&quot;Lisp&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;ddcteol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;End&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Line ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (interactive)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;excursion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    (kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;new
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;     (buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;substring
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;      (point)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;      (point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;eol)))))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key (kbd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;C-c w e&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &amp;#39;ddcteol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;End&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Line)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Demo (set the point to 私, copy to the end of line, then yank)&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;copy-to-eol.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Expand-region&lt;&#x2F;strong&gt; and &lt;strong&gt;Copy-from-point-to-end-of-line&lt;&#x2F;strong&gt; are extremely
useful when the extracted content is copied to the &lt;strong&gt;system
clipboard&lt;&#x2F;strong&gt;. For instance, I usually:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;copy something to the clipboard: &lt;code&gt;M-w&lt;&#x2F;code&gt;, or &lt;code&gt;C-=&lt;&#x2F;code&gt; + &lt;code&gt;M-w&lt;&#x2F;code&gt;, or &lt;code&gt;C-c w e&lt;&#x2F;code&gt; + &lt;code&gt;M-w&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;open Google Translate (Japanese-&amp;gt;English): &lt;code&gt;S-s&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;paste from clipboard: &lt;code&gt;C-y&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;close the current window: &lt;code&gt;S-q&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s not easy to translate something quicker than this!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rectangle&lt;&#x2F;strong&gt; + &lt;strong&gt;Multiple-cursors&lt;&#x2F;strong&gt;: rectangle commands operate on a
rectangular area of text, while
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;magnars&#x2F;multiple-cursors.el&quot;&gt;Multiple-cursors&lt;&#x2F;a&gt; is
a package to operate simultaneously on different lines. See how you
can work on 4 lines! (reversed demo, since mc breaks gif-screencast)&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;rectangles-mc.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Register-based-jumps&lt;&#x2F;strong&gt;: when working with notes I frequently need to
edit two tables repeatedly. The pattern is simple, add a line to the
first one, then a line to the second one and so on. Going back and
forth between two positions is a tedious activity. Fortunately Emacs
implements &lt;strong&gt;registers&lt;&#x2F;strong&gt;, which are compartments where you can save
text or positions for later use. So, I wrote a couple trivial
functions to jump between two points A and B. It may seem silly, but
it saved me lots of time with tables hundreds of lines long. Look at
the gif to see how it works.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;register-jumps.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;exporting-notes&quot;&gt;Exporting notes&lt;a class=&quot;zola-anchor&quot; href=&quot;#exporting-notes&quot; aria-label=&quot;Anchor link for: exporting-notes&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Up to now we have seen little functions useful to improve writing
experience, but here comes one of the big advantages of Org: exporting
notes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;&#x2F;strong&gt;. Many devices have a browser, so a thing worth doing is to
export notes to the HTML format. Org has a built in function to do
that, &lt;code&gt;org-html-export-to-html&lt;&#x2F;code&gt;. You can call it with &lt;code&gt;C-c C-e h h&lt;&#x2F;code&gt;
from an Org buffer. The HTML file produced has no style by default,
but a CSS file can be embedded using Org TAGs. The same can be done to
adjust some options, like the removal of the link used to validate the
page, or the removal of author&#x27;s name, etc. Here&#x27;s a snippet from my
notes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#+HTML_HEAD: &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text&#x2F;css&amp;quot; href=&amp;quot;style.css&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#+OPTIONS: num:nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#+OPTIONS: toc:nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#+OPTIONS: author:nil email:nil creator:nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;#+OPTIONS: org-html-validation-link:nil
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I added a couple of settings to the CSS file so to use a dark theme
and improve a bit the readability. Take a look at my vocabulary notes.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;vocabulary.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Hitting &lt;code&gt;C-c C-e h h&lt;&#x2F;code&gt; feels a bit slow, wouldn&#x27;t it be better to use
&lt;code&gt;C-~&lt;&#x2F;code&gt;? Well, I wrote a couple of functions to do so.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Lisp&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-Lisp &quot;&gt;&lt;code class=&quot;language-Lisp&quot; data-lang=&quot;Lisp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;;; placeholder to execute a function by name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;defvar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;placeholder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;initialize function name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Name of a function callable with dd&#x2F;... utility.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;ddscfn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Name ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Sets the value of the variable callable-function-placeholder.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (interactive)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;placeholder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;minibuffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Set callable-function-name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;placeholder)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;ddccf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Function ()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Calls the function name saved in the callable-function-placeholder variable.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (interactive)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;funcall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;intern&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;placeholder)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;key (kbd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;C-~&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &amp;#39;ddccf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Callable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Function)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how to use them. First I call the function
&lt;code&gt;Set-Callable-Function-Name&lt;&#x2F;code&gt; specifying &lt;code&gt;org-html-export-to-html&lt;&#x2F;code&gt; as
argument, then hit &lt;code&gt;C-~&lt;&#x2F;code&gt; a couple of times, each time converting the
note into HTML.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;set-callable-fn.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Android app&lt;&#x2F;strong&gt;. It was at this point that I realized I could use
short breaks and commute time to review some Japanese! To do that I
wrote a simple Python script to collect all my notes and generate an
index page. Then I developed a simple Android application that
leverages &lt;strong&gt;WebView&lt;&#x2F;strong&gt; to render the website, finally side-loaded the
app on my phone.&lt;&#x2F;p&gt;
&lt;p&gt;I used a Makefile to automate the process, so every time a new note is
created:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;the website is refreshed to take account of the new material;&lt;&#x2F;li&gt;
&lt;li&gt;the website is embedded into the application local storage;&lt;&#x2F;li&gt;
&lt;li&gt;the application package is built using &lt;code&gt;Gradlew&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;the apk is aligned and signed with &lt;code&gt;zipalign&lt;&#x2F;code&gt; and &lt;code&gt;apksigner&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;the apk is installed to the emulator (or the device) via &lt;code&gt;ADB&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;android-app.gif&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;PDF, Kindle&lt;&#x2F;strong&gt;. Having the notes on my phone was great, but nothing
beats an E-Ink screen when it comes to &lt;strong&gt;eye strain reduction&lt;&#x2F;strong&gt;. So, I
needed a way to convert the material into PDF to send it to the
Kindle. Org Mode supports Org to PDF conversion (the note is first
converted into a LaTeX document, then into PDF, see the
&lt;code&gt;org-latex-export-to-latex&lt;&#x2F;code&gt; function). The conversion works really
well with structured documents such as articles and reports, but it
wasn&#x27;t the case for my notes (I didn&#x27;t have chapters, or
sections). The best solution I found was &lt;strong&gt;WeasyPrint&lt;&#x2F;strong&gt;, a package
that gets an HTML source as input (usually code documentation) and
turns it into PDF. Since WeasyPrint takes some time to produce the
output, I wrote a simple Python script to generate the A5 format PDF
representation of each note in parallel, then merged the PDF sources
with &lt;code&gt;pdftk&lt;&#x2F;code&gt;. I&#x27;m quite satisfied with the result, links between pages
no longer works, but every note file appears in the Index properly.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 350px; &quot;&gt;
  &lt;img src=&quot;kindle.jpg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;exam&quot;&gt;Exam&lt;a class=&quot;zola-anchor&quot; href=&quot;#exam&quot; aria-label=&quot;Anchor link for: exam&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As anticipated, I took the N3 exam on December, the 4th. A couple of
weeks later, it&#x27;s time to wrap up and make some reflections.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Some stats&lt;&#x2F;strong&gt;. I have created 91 well formatted Org notes based on
the content of the Kanzen Master Kanji, Vocabulary, and Grammar
books. Each file is 143 lines long on average. It took me about 3.25
months to prepare the material (August, September, October, and the
first week of November).  So, I spent roughly 3 weeks reviewing the
notes before the exam (I was able to review more or less 40% of the
material). As mentioned earlier, my preparation also included
listening to all the lessons in the JPod101 N5 and N4 pathways
(roughly 190 lessons, each 14-18 minutes long), and just 13 lessons of
the N3 pathway (exam preparation unit). All the lessons were listened
once (no review in this case).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;N3 exam&lt;&#x2F;strong&gt;. I struggled a lot during the exam, and already during the
first half an hour, I realized I was still far from the N3 level (at
least, far from passing the test). While I was able to detect many of
the patterns I had studied, Vocabulary was the real problem. Japanese
is not like a Math or Coding questions, where you can use your
reasoning or logic to find a solution to a problem. Indeed, it is very
difficult to grasp the meaning of a sentence in which you can&#x27;t
translate 2 to 3 words. Also, I had a bit of trouble managing the
time, simply, I couldn&#x27;t read fast enough. This was a problem in
pretty much all the sections of the test, including Listening (i.e.,
to select the correct answer).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reflections&quot;&gt;Reflections&lt;a class=&quot;zola-anchor&quot; href=&quot;#reflections&quot; aria-label=&quot;Anchor link for: reflections&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You might be thinking, did it really make sense to prepare the exam
this way? Wouldn&#x27;t it be better to simply follow the advice of a
teacher or go to a school? Are you sure you saved time using Emacs?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Short answer&lt;&#x2F;strong&gt;. Well in short, I think my choices were rational, and
yes I still think my approach makes sense. But let me elaborate a bit
more. The Japan Language Education Center estimates that students
residing in Japan (and with no prior knowledge of kanji), on average,
need to study 575-1000 hours to pass the JLPT N4, and 950-1700 for the
N3. Taking notes took me about 110 hours (I use Emacs logbooks to keep
track of time, so this number is quite accurate), while I have
listened to JPod101 for at least 60 hours. So, the road is still very
long. Anyway, I believe notes will give me a powerful advantage, since
I will be able to review kanji and Grammar efficiently in the next
months.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;About time&lt;&#x2F;strong&gt;. Looking back in time, my guess to reach the N3 level
in 4 months was too optimistic. I mean, a motivated student can
definitely do that, but a full-time worker, according to my
experience, can&#x27;t think to allocate more than 8-12 hours per week to
the task. Personally, I tried to boost my productivity reviewing stuff
during short breaks, or listening to JPod101 while walking or before
going to bed. But frankly speaking, at least half of the time I spent
taking notes was during the weekend. This had quite an impact on my
routine (less coding, less YouTube, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The errors&lt;&#x2F;strong&gt;. While preparing for the test, I think I made a couple
of errors. The first one was try to process too much material, too
quickly. For instance, the N3 introduces 370 new kanji compared to the
N4, and I tried to study them all together, but it would have been
wiser to slow down the pace. The second error was practicing too
little. Reading speed is very important, and I didn&#x27;t do anything
particular to improve it. There are two apps that could help fixing
these errors: Kanji Study and Todai news. I&#x27;ve been testing them
recently, but unlike JPod101, I probably need using them a bit more
before recommending.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What I learnt&lt;&#x2F;strong&gt;. Learning the Japanese Language is a hard task, not
in the sense that it is something complex, but it requires
time. However, this activity is offering me a completely new
perspective, and I think it has already affected the way I work. While
I was studying at university I used to organize my schedule based on
deadlines, and the goal was always try to maximize a score, or get the
best grade. Now I tend to prioritize efficiency, so I try to
destructure big tasks into smaller ones, develop a routine, and track
the progress weekly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What will I do next?&lt;&#x2F;strong&gt;  In the short term I&#x27;d like to improve the
quality and expand my notes, there&#x27;s a lot of material in the Kanzen
Master that I haven&#x27;t processed yet. Also, I&#x27;d like to practice
writing, just to test whether I can more easily remember kanji (yes,
even though I can read and speak to a certain degree, I still can&#x27;t
write using a pencil). After consolidating my background a bit, I will
try to add more balance to my preparation, probably trying to read
short articles. I&#x27;m still a bit embarrassed to try to speak to someone
in Japanese, but maybe I&#x27;ll be ready to ask the help of a teacher in
the next moths.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you are a programmer, and would like to study the language,
don&#x27;t be too worried, I&#x27;m really enjoying the journey!&lt;&#x2F;p&gt;
&lt;p&gt;I hope my experience will be useful.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Calling Go from Python via gRPC</title>
		<published>2022-05-20T00:00:00+00:00</published>
		<updated>2022-05-20T00:00:00+00:00</updated>
        <summary>&lt;p&gt;In this post I’ll show you how to make remote procedure calls via gRPC
between Python and Go, securing the communication with TLS.&lt;&#x2F;p&gt;
</summary>
		<link href="https://dariofad.github.io/blog/2022-05-20/" type="text/html"/>
		<id>https://dariofad.github.io/blog/2022-05-20/</id>
		<content type="html">&lt;p&gt;In this post I’ll show you how to make remote procedure calls via gRPC
between Python and Go, securing the communication with TLS.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A common problem for developers is the invocation of code running in
separate contexts. To give some examples, the developer may connect to
a service to download a file, retrieve the inbox mail, get its feed
and many more. A modern framework to connect services in and across
data centers is &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt;. In this post I&#x27;ll show you
how to make &lt;strong&gt;remote procedure calls&lt;&#x2F;strong&gt; via &lt;strong&gt;gRPC&lt;&#x2F;strong&gt; between Python and
Go. I&#x27;ll also share some tips to provide end-to-end security of data
transmitted.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-grpc&quot;&gt;What is gRPC&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-grpc&quot; aria-label=&quot;Anchor link for: what-is-grpc&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned before, gRPC is a high performance remote procedure call
framework. gRPC is based on the idea of defining a service. The
service specifies a set of methods that can be called remotely, along
with their type parameters. The service interface is implemented and
exposed by a server. A client can talk to the server simply by calling
one of the methods defined in the interface.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 600px;&quot;&gt;
  &lt;img src=&quot;client-stub.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;What makes gRPC special is that the client can invoke the functions
exposed by the server simply by calling them, as if they were locally
defined. Moreover, since the service interface is language agnostic,
there is no need to worry about the interoperability between the
languages used to implement the client or the server (contrary to what
happens with Foreign Function Interfaces FFIs). Indeed, client and
server do not communicate sharing raw memory directly, but with
&lt;em&gt;messages&lt;&#x2F;em&gt;. To structure them gRPC relies on &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;overview&quot;&gt;Protocol
Buffers&lt;&#x2F;a&gt;,
an open source mechanism for serializing structured data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-project&quot;&gt;The project&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-project&quot; aria-label=&quot;Anchor link for: the-project&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To illustrate how gRPC works I&#x27;ll use a basic example. Imagine you
have a web mapping platform like Google Maps, you may have some
satellites scanning the Earth and storing the data on a server, and
clients performing some queries to the server to get the view of a
location. For simplicity, assume you already have a 80x32 (width,
height) 2D map of the Earth stored on the server. The goal is to
support queries to get the image associated with the &lt;code&gt;xy&lt;&#x2F;code&gt; coordinate
of a location, and also queries to get the view associated with a
broader rectangular area delimited by the &lt;code&gt;xy&lt;&#x2F;code&gt; coordinates associated
with its bottom-left and top-right corners. Also, you may want to
encrypt the communication between client and server to counter
eavesdropping and ensure no third-parties are able to perform MITM
attacks (i.e., like replacing the image associated with a coordinate).&lt;&#x2F;p&gt;
&lt;p&gt;In the following sections we&#x27;ll go through the implementation
step-by-step. The source code is available
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dariofad&#x2F;grpc_py_go_example&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;service-interface&quot;&gt;Service interface&lt;a class=&quot;zola-anchor&quot; href=&quot;#service-interface&quot; aria-label=&quot;Anchor link for: service-interface&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first step when working with protocol buffers is to define the
structure for the data that will be shared between client and server,
or the &lt;em&gt;messages&lt;&#x2F;em&gt;. These structures are defined in a proto file, which
is simply a text file with a &lt;code&gt;.proto&lt;&#x2F;code&gt; extension. Each message can be
seen as a struct, and the important thing to understand is that the
&lt;em&gt;fields&lt;&#x2F;em&gt; in each message have fixed type and pre-defined
ordering. Let&#x27;s see what messages look like in our &lt;code&gt;satellite.proto&lt;&#x2F;code&gt;
file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;syntax = &amp;quot;proto3&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;message Location {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	int32 x = 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	int32 y = 2;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;message Area {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	Location ll = 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	Location ur = 2;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;message Image {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	int32 x = 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	int32 y = 2;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	bytes img = 3;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see from the code, the &lt;code&gt;Location&lt;&#x2F;code&gt; message uses only &lt;strong&gt;scalar
types&lt;&#x2F;strong&gt;, the &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; coordinates. To each scalar type, Protocol
buffers enable the serialization (without loss of information) to a
programming language target type (see
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;docs&#x2F;proto3#scalar&quot;&gt;here&lt;&#x2F;a&gt;
for the complete reference).  Messages can also be used as fields in
other messages, as can be seen in &lt;code&gt;Area&lt;&#x2F;code&gt;. This is called &lt;em&gt;nested&lt;&#x2F;em&gt;
messages. With regard to the &lt;code&gt;Image&lt;&#x2F;code&gt; message, I opted for using simply
&lt;code&gt;bytes&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have defined the messages, we need to define the
services. This can be done directly in the proto file used for the
definition of messages. In our case we&#x27;re going to have a single
service &lt;code&gt;Satellite&lt;&#x2F;code&gt;. The service is going to expose two RPCs:
&lt;code&gt;GetImage&lt;&#x2F;code&gt; to return a single image, and &lt;code&gt;GetImages&lt;&#x2F;code&gt; to return
multiple images (for the rectangular area).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;service Satellite {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	rpc GetImage (Location) returns (Image) {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	rpc GetImages (Area) returns (stream Image) {};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;GetImage&lt;&#x2F;code&gt; is a unary RPC where the client sends a single request to
the server and gets a response back (just like a normal function
call), while &lt;code&gt;GetImages&lt;&#x2F;code&gt; is a server streaming RPC, where the client
sends a single request to the server and gets a stream to read a
sequence of messages back.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server-stub-generation&quot;&gt;Server, stub generation&lt;a class=&quot;zola-anchor&quot; href=&quot;#server-stub-generation&quot; aria-label=&quot;Anchor link for: server-stub-generation&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The next step to be performed is the automatic generation of the
client stub and the gRPC server. To do this we first need to install
the &lt;code&gt;protoc&lt;&#x2F;code&gt; compiler to serialize the messages (available
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;), the
&lt;code&gt;protoc-gen-go-grpc&lt;&#x2F;code&gt; tool to generate the Go bindings to our service
for the server (available
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;google.golang.org&#x2F;grpc&#x2F;cmd&#x2F;protoc-gen-go-grpc#section-readme&quot;&gt;here&lt;&#x2F;a&gt;),
and &lt;code&gt;grpcio&lt;&#x2F;code&gt;, &lt;code&gt;grpcio-tools&lt;&#x2F;code&gt;, and &lt;code&gt;protobuf&lt;&#x2F;code&gt; packages to generate the
bindings to our service for the Python client (the Makefile in the
project provides a recipe to automatically download and install the
dependencies). It is important to separate in different directories
the code associated with the service interface, the server, and the
client. The structure I&#x27;m using for the project is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;├── client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   ├── app.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;├── protos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   └── satellite.proto
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;├── server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   └── server.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To generate the bindings we start from the server. We want to generate
them inside &lt;code&gt;server&#x2F;&lt;&#x2F;code&gt;, in a dedicated package. To do that, we add to
the proto file (immediately after &lt;code&gt;syntax&lt;&#x2F;code&gt;) the lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;package satellite;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;option go_package = &amp;quot;example.com&#x2F;satellitepb&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;protoc --go-grpc_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;server&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; --go_out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;server&#x2F; protos&#x2F;satellite.proto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;from the command line. Then we generate the bindings for the
client. The Python toolchain requires a slightly different
configuration, in this case we are going to generate the bindings
inside &lt;code&gt;client&#x2F;protos&#x2F;&lt;&#x2F;code&gt;. To do that we run:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;python -m grpc_tools.protoc -I. --python_out=client --grpc_python_out=client protos&#x2F;satellite.proto&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As a result of the previous steps you should see the following files
in the project directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#6c7079;&quot;&gt;&lt;code&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;├── client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   ├── protos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   │   ├── satellite_pb2_grpc.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   │   └── satellite_pb2.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;├── server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   ├── example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   │   └── satellitepb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   │       ├── satellite_grpc.pb.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;│   │       └── satellite.pb.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The generation of the service interface for the client and the server
is complete.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serving-single-requests&quot;&gt;Serving single requests&lt;a class=&quot;zola-anchor&quot; href=&quot;#serving-single-requests&quot; aria-label=&quot;Anchor link for: serving-single-requests&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To serve single requests we first need to spawn a gRPC server on a
dedicated port, then we have to provide an implementation of
the &lt;code&gt;GetImage&lt;&#x2F;code&gt; service.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server&quot;&gt;Server&lt;a class=&quot;zola-anchor&quot; href=&quot;#server&quot; aria-label=&quot;Anchor link for: server&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In our case, the server stores the map along with two loggers, one to
log information such as incoming requests, and the other to log
errors. Please note that we also need to embed the automatically
generated &lt;code&gt;satellitepb.UnimplementedSatelliteServer&lt;&#x2F;code&gt;. This is done to
ensure forward compatible implementations (the inner type is used as a
base class in an OOP language).  At initialization time, we get an
instance of the server and load the map from a template.  We
previously defined the map as a collection of images, each represented
as a sequence of bytes. However, to demonstrate how gRPC works we can
just replace each image by a single character (empty character for the
sea, non empty character for land). Nothing changes from a technical
perspective, but doing so allow us to print the map nicely to console.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;height &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;width  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;UnimplementedSatelliteServer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;InfoLog                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ErrorLog                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sMap                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;InfoLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;INFO:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Lmicroseconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ErrorLog &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;ERROR:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Lmicroseconds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sMap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;LoadMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; load the example map
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LoadMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;map.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; create a tcp listener
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Listen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;tcp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;0.0.0.0:8000&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Cannot listen to 0.0.0.0:8000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; init the gRPC server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpcServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RegisterSatelliteServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpcServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; serve requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Server starting...&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpcServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Serve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;lis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After loading the map we start a tcp listener on port 8000, and
instantiate the default gRPC server. The default gRPC server has no
service registered and has not started to accept requests yet. The
skeleton of the server is implemented in the &lt;code&gt;google.golang.org&#x2F;grpc&lt;&#x2F;code&gt;
package. We register our &lt;code&gt;Server&lt;&#x2F;code&gt; to it using the bindings generated
with &lt;code&gt;protoc-gen-go-grpc&lt;&#x2F;code&gt;. After that, we can serve incoming requests
on port 8000. The skeleton implementation of the server provides the
logic to accept incoming connections on the listener &lt;code&gt;lis&lt;&#x2F;code&gt;. Each
service request will be handled in a dedicated goroutine, and served
invoking the proper handle.&lt;&#x2F;p&gt;
&lt;p&gt;To effectively serve &lt;code&gt;GetImage&lt;&#x2F;code&gt; requests we have to provide an
implementation of the related handle (if you remember we have embedded
in our &lt;code&gt;Server&lt;&#x2F;code&gt; struct the type
&lt;code&gt;satellitepb.UnimplementedSatelliteServer&lt;&#x2F;code&gt;). The prototype of the
handler is again defined in &lt;code&gt;satellite_grpc.pb.go&lt;&#x2F;code&gt;, we just need to
add the body as shown below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;GetImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;InfoLog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;GetImage request (x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isValidCoord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CheckLocation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;isValidCoord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;codes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OutOfRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OutOfBoundFmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The fuction receives as arguments a context &lt;code&gt;ctx&lt;&#x2F;code&gt; (which can be used
to attach metadata and specify deadlines) and a &lt;code&gt;Location&lt;&#x2F;code&gt; message,
and returns an &lt;code&gt;Image&lt;&#x2F;code&gt; as defined in the proto interface. Upon
receiving a request, the server writes a record to the log, validates
the coordinate, retrieves an image from the map, and then uses the
proto interface to return it to the caller.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client&quot; aria-label=&quot;Anchor link for: client&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The client must be able to open a channel to the server, send requests
using the stub, and wait for the result. The procedure here is
straightforward: 1) we use the &lt;code&gt;grpc.aio.insecure_channel()&lt;&#x2F;code&gt; method to
create a channel to the server (specifying host and port), 2)
instantiate the client stub using the bindings &lt;code&gt;satellite_pb2_grpc.py&lt;&#x2F;code&gt;
generated with protoc, and 3) send the requests one at a time using the
method &lt;code&gt;GetImage()&lt;&#x2F;code&gt; implemented by the auto-generated stub. Since
requests are asynchronous operations, an Event Loop is used to run
until the future (i.e., each request) has completed. The code is shown
below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;0.0.0.0:8000&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;proxy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SimpleProxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(server)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;locations &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;proxy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;GetRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(locations)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;SimpleProxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;GetRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Get single locations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;[*] gRPC single requests:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;get_event_loop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;run_until_complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_getRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(locations))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;_getRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grpc.aio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;insecure_channel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.server) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;channel:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Init the client stub
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            stub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2_grpc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SatelliteStub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(channel)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;locations:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                    response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_get_img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(stub, loc)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                    result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;((loc[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], loc[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], response.img))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grpc.RpcError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;e:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                    status_code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grpc.StatusCode.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;OUT_OF_RANGE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;status_code:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Bad request, out of bound location&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, loc)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(e)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;result
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;_get_img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: protos.satellite_pb2_grpc.SatelliteStub, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        loc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        loc.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;location[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        loc.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;location[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# send the request using the stub
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;stub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;GetImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(loc)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;implementing-a-stream&quot;&gt;Implementing a Stream&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementing-a-stream&quot; aria-label=&quot;Anchor link for: implementing-a-stream&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;server-1&quot;&gt;Server&lt;a class=&quot;zola-anchor&quot; href=&quot;#server-1&quot; aria-label=&quot;Anchor link for: server-1&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In the requirements we mentioned the ability to query the server to
get a rectangular area of the map. Consider that, in a real scenario,
maps can grow very large, and we want to avoid the client to block
until a big area is fully downloaded. The idea is then to send to the
client a stream of messages associated with each location in the
requested area, enabling the client app to render each image to the UI
as soon as it is available.&lt;&#x2F;p&gt;
&lt;p&gt;To do that, we need to implement the server&#x27;s &lt;code&gt;GetImages()&lt;&#x2F;code&gt;
interface. Starting from the prototype generated in the
&lt;code&gt;satellite_grpc.pb.go&lt;&#x2F;code&gt; file, we create a function as shown below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;GetImages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stream satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;Satellite_GetImagesServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;InfoLog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;GetImages stream request (x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;) -&amp;gt; (x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;* ...check valid area...*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ur&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;i
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Ll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;j
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;satellitepb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;int32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;			}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The key point here is to send multiple messages back to the client
using the &lt;code&gt;stream.Send()&lt;&#x2F;code&gt; function. gRPC does not wait until the
message is received by the client. As a result, an untimely stream
closure may result in lost messages.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-1&quot;&gt;Client&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-1&quot; aria-label=&quot;Anchor link for: client-1&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Client side, we need to provide a way to download the map (or part of
it), and simultaneously render it to the console. The simplest way to
do so is perhaps using two processes exchanging memory with a
queue. In the first process we execute a modified version of the proxy
(which is used to query the server), while in the second, we run the
rendering process to update the local map and visualize it to the UI.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;area &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;79&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# coordinates of the area to download
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    proxy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;GetStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(queue, area)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Query, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(proxy, queue, area,))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# rendering to console
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Render&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compared to the single requests case, we just need to wait until the
server stream is closed, and put each image into the queue as soon as
it is available.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;_get_imgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;stub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: protos.satellite_pb2_grpc.SatelliteStub, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;xy1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;xy2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ll.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;xy1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ll.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;xy1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ur.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;xy2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    ur.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;xy2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    area &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Area&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    area.ll.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CopyFrom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(ll)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    area.ur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CopyFrom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(ur)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    responses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;stub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;GetImages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(area)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;responses:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([response.x, response.y, response.img])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just for the sake of testing, the server implementation in the
repository uses a &lt;code&gt;SLEEP_TIME&lt;&#x2F;code&gt; between calls to &lt;code&gt;stream.Send()&lt;&#x2F;code&gt; to
simulate the delay introduced by larger images. A fixed sleep time of
1 or 2 ms is should be enough to demonstrate the approach. Larger
sleep times (e.g., &amp;gt;15 ms) can be used to test the cancellation of a
request (i.e., the client can set a deadline for the request to be
served).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re ready for a demo!&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; &quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;blog_assets&#x2F;2022_05_20&#x2F;demo.gif&quot; alt=&quot;&quot; style=&quot;border-radius: 1%;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;securing-communication&quot;&gt;Securing communication&lt;a class=&quot;zola-anchor&quot; href=&quot;#securing-communication&quot; aria-label=&quot;Anchor link for: securing-communication&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the introduction we mentioned the ability to encrypt the
communication between client and server to counter eavesdropping and
ensure no third-parties are able to perform MITM attacks. Up to now,
no action was taken to fulfill this requirement. To demonstrate that,
we can inspect the network communication using Wireshark.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 850px;&quot;&gt;
  &lt;img src=&quot;no_tls.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As you may have noticed from the previous gif, some metadata is
attached to the request performed by the client. Its name is &lt;code&gt;token&lt;&#x2F;code&gt;,
and the value &#x27;03357-1&#x27;. Looking at packet 6 from the trace, it is
clear that the requests and data are sent in plaintext between client
and server, so no confidentiality is ensured. It is even worse the
fact that somebody can impersonate either the client or the server and
replace the data exchanged.&lt;&#x2F;p&gt;
&lt;p&gt;gRPC offers several &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;docs&#x2F;guides&#x2F;auth&#x2F;&quot;&gt;ways&lt;&#x2F;a&gt; to
authenticate and secure communication. In this post we&#x27;re going to see
how to encrypt all the data and perform mutual authentication for
client and server using TLS. This is somehow the simplest way to do
so. To make it work, we have to start from certificates.&lt;&#x2F;p&gt;
&lt;p&gt;In TLS, certificates are issued by a trusted certificate authority
(simply CA). Since we&#x27;re simulating everything from scratch we assume
no CA is available, hence we&#x27;re going to create a valid certificate
for the CA, for the server and for the client using &lt;code&gt;openssl&lt;&#x2F;code&gt;. We
start from the CA. Let&#x27;s run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;openssl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -x509 -newkey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rsa:4096&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -days&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -nodes -keyout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;ca-key.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;		-out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;ca-cert.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -subj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;C=&#x2F;ST=&#x2F;L=&#x2F;O=My CA&#x2F;OU=&#x2F;CN=&#x2F;emailAddress=&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command creates a new private RSA key and a public x509
certificate for the CA (the &lt;code&gt;-subj&lt;&#x2F;code&gt; argument), saving them in pem
format in the &lt;code&gt;cert&lt;&#x2F;code&gt; directory. Expiration is set in 30 days. To
inspect their content you can run &lt;code&gt;openssl rsa -in certs&#x2F;ca-key.pem -text&lt;&#x2F;code&gt; and &lt;code&gt;openssl x509 -in certs&#x2F;ca-cert.pem -text&lt;&#x2F;code&gt;, respectively.&lt;&#x2F;p&gt;
&lt;p&gt;The process for the client and the server is slightly different, we&#x27;re
still creating the private and public keys using &lt;code&gt;openssl&lt;&#x2F;code&gt;, but we
have to simulate the submission of a certificate sign request (CSR) to
the CA for producing a validate certificate. This is how to do that on
behalf of the server (the same applies for the client).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Server&amp;#39;s keys + CSR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;openssl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -newkey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rsa:4096&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -nodes -keyout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-key.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-req.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;		-subj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&#x2F;C=&#x2F;ST=&#x2F;L=&#x2F;O=Server&#x2F;OU=&#x2F;CN=&#x2F;emailAddress=&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Inspect and verify the CSR
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;openssl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -text -noout -verify -in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-req.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Sign the CSR with CA&amp;#39;s key to generate a valid certificate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;openssl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -req -in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-req.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -days&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; 30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -CA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;ca-cert.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;		-CAkey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;ca-key.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -CAcreateserial -out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-cert.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;		-extfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; certs&#x2F;server-ext.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have generated valid certificates we have to configure the
server and the client to use them to setup the communication
channel. We start from the server. First we create a new valid set of
TLS credentials, then we inject them at gRPC server init time. The new
credentials collect the private key and the public certificate of the
server, as well as the public certificate of the trusted CA. It also
tells the server that the client must be successfully authenticated
for its requests to be served.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;loadTLSCreds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;TransportCredentials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;caCert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ioutil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ReadFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;..&#x2F;certs&#x2F;ca-cert.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;certPool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NewCertPool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;certPool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;AppendCertsFromPEM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;caCert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;failed to add CA&amp;#39;s certificate&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LoadX509KeyPair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;..&#x2F;certs&#x2F;server-cert.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;..&#x2F;certs&#x2F;server-key.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ClientAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;RequireAndVerifyClientCert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ClientCAs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;certPool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NewTLS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;* ... *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; load TLS credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tlsCreds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;loadTLSCreds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Error loading TLS credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;&#x2F; init the gRPC server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpcServer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;Creds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tlsCreds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&#x2F;* ... *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly to what we did for the server, we setup the client to use
the certificates. We also update the &lt;code&gt;_getRequests()&lt;&#x2F;code&gt; and
&lt;code&gt;_getStream()&lt;&#x2F;code&gt; methods to use a secure communication channel.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f0c678;&quot;&gt;SimpleProxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.ca_cert, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.client_cert, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.client_key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;_readCertificates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# setup the new gRPC credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.grpc_credentials &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grpc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ssl_channel_credentials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;root_certificates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.ca_cert,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;private_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.client_key,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;certificate_chain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.client_cert)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;_readCertificates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;.&#x2F;certs&#x2F;ca-cert.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;rb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f1:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            caCert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;.&#x2F;certs&#x2F;client-cert.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;rb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f2:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            clientCert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;.&#x2F;certs&#x2F;client-key.pem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;rb&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f3:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            clientKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;f3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;caCert, clientCert, clientKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;_getRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;async with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;grpc.aio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;secure_channel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.server, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.grpc_credentials) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;channel:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# Init the client stub with the secure channel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            stub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;protos.satellite_pb2_grpc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SatelliteStub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(channel)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;...call the service...&amp;quot;&amp;quot;&amp;quot;		
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s again inspect the network traffic with Wireshark.&lt;&#x2F;p&gt;
&lt;div style=&quot;margin-right: auto; margin-left: auto; width: 100%; max-width: 850px;&quot;&gt;
  &lt;img src=&quot;tls.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As you can see from the result, client and server perform a TLS
handshake to establish a secure channel, and all application data is
sent encrypted.&lt;&#x2F;p&gt;
&lt;p&gt;The source code is available
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dariofad&#x2F;grpc_py_go_example&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I hope you enjoyed it!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to upgrade the Kernel (beginner)</title>
		<published>2021-10-16T00:00:00+00:00</published>
		<updated>2021-10-16T00:00:00+00:00</updated>
        <summary>&lt;p&gt;In this post I&#x27;ll show you how to build and install the latest
Kernel version available to your system, possibly enabling the
Landlock LSM module.&lt;&#x2F;p&gt;
</summary>
		<link href="https://dariofad.github.io/blog/2021-10-16/" type="text/html"/>
		<id>https://dariofad.github.io/blog/2021-10-16/</id>
		<content type="html">&lt;p&gt;In this post I&#x27;ll show you how to build and install the latest
Kernel version available to your system, possibly enabling the
Landlock LSM module.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;One of the latest modules available in the Linux Kernel is Landlock,
an unprivileged sandboxing mechanism that allows a process to confine
itself. Since it could be useful for one of my new projects, I decided
to try it out.  Landlock was merged into &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;git.kernel.org&#x2F;pub&#x2F;scm&#x2F;linux&#x2F;kernel&#x2F;git&#x2F;torvalds&#x2F;linux.git&#x2F;commit&#x2F;?id=17ae69aba89d&quot;&gt;Linux
5.13&lt;&#x2F;a&gt;. As
I wanted to test the latest version available, I needed a &lt;strong&gt;Kernel
upgrade&lt;&#x2F;strong&gt;. Contrary to what one might think, upgrading the Kernel with
a more recent version is really easy.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;ll show you how to &lt;strong&gt;build and install&lt;&#x2F;strong&gt; the latest
&lt;strong&gt;Kernel&lt;&#x2F;strong&gt; version available to your system, possibly enabling the
Landlock LSM module.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upgrade&quot;&gt;Upgrade&lt;a class=&quot;zola-anchor&quot; href=&quot;#upgrade&quot; aria-label=&quot;Anchor link for: upgrade&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before we begin, I&#x27;d like to remind you that we&#x27;re not installing the
latest Kernel image via &lt;code&gt;apt&lt;&#x2F;code&gt; from the official repository of your
distribution, but from source files. Thus, I recommend installing a
VM, with at least 50 GB of dedicated storage (after the build, the
local folder containing the latest image occupies approximately 21
GB). The following procedure has been tested with Ubuntu 21.10.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;source-files-requirements&quot;&gt;Source files, requirements&lt;a class=&quot;zola-anchor&quot; href=&quot;#source-files-requirements&quot; aria-label=&quot;Anchor link for: source-files-requirements&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing to do is to download the Kernel mainline version. You
can either do this from &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;&quot;&gt;The Linux Kernel
Archives&lt;&#x2F;a&gt; or from
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;torvalds&#x2F;linux&quot;&gt;Github&lt;&#x2F;a&gt;. From terminal you run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; https:&#x2F;&#x2F;cdn.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F;v5.x&#x2F;linux-5.15-rc5.tar.xz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;tar -xvf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; linux-5.15-rc5.tar.xz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; linux-5.15-rc5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To compile the kernel you need a minimal set of
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;v4.13&#x2F;process&#x2F;changes.html&quot;&gt;requirements&lt;&#x2F;a&gt;. The
version of each tool may vary between different platforms (based on
the architecture), in my case I just need the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; apt install \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	fakeroot \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e05252;color:#ffffff;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;build-essential &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	ncurses-doc \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	libncurses-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	xz-utils \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	libssl-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	bc \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	flex \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	libelf-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	bison
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;edit-the-build-configuration&quot;&gt;Edit the build configuration&lt;a class=&quot;zola-anchor&quot; href=&quot;#edit-the-build-configuration&quot; aria-label=&quot;Anchor link for: edit-the-build-configuration&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To configure the build we need to edit the content of the &lt;code&gt;.config&lt;&#x2F;code&gt;
configuration file. This is an automatically generated file that
should be changed only with the terminal-oriented &lt;code&gt;menuconfig&lt;&#x2F;code&gt;
configuration tool (you can start it running &lt;code&gt;make menuconfig&lt;&#x2F;code&gt;). However, since we already have a valid configuration for
our VM saved at &lt;code&gt;&#x2F;boot&#x2F;config-$(uname -r)&lt;&#x2F;code&gt;, we can override &lt;code&gt;.config&lt;&#x2F;code&gt;
with its content. To do that run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;boot&#x2F;config-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;uname -r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) .config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that when you override &lt;code&gt;.config&lt;&#x2F;code&gt;, you&#x27;re deleting the
configuration required by the components or modules that were added to
the Kernel repository after your running Kernel image was
created. This typically impacts he drivers added to support new
hardware. Anyway, it isn&#x27;t a big problem: you can either use
&lt;code&gt;menuconfig&lt;&#x2F;code&gt; to specify the missing bits, or directly provide the
input at build time (from terminal, according to the default options).&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, as we won&#x27;t need to seal keys in a TPM using
&lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man7&#x2F;keyrings.7.html&quot;&gt;keyrings&lt;&#x2F;a&gt;, we
can edit &lt;code&gt;.config&lt;&#x2F;code&gt; setting the variable &lt;code&gt;CONFIG_SYSTEM_TRUSTED_KEYS&lt;&#x2F;code&gt;
to &lt;code&gt;&amp;quot;&amp;quot;&lt;&#x2F;code&gt;. Also, we can comment out the line &lt;code&gt;CONFIG_DEBUG_INFO_BTF=y&lt;&#x2F;code&gt;,
as we won&#x27;t need to debug eBPF programs.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you want to activate Landlock LSM, edit the security
options setting the &lt;code&gt;CONFIG_LSM&lt;&#x2F;code&gt; variable to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;CONFIG_LSM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;lockdown,yama,integrity,apparmor,landlock&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;compile-and-install&quot;&gt;Compile and install&lt;a class=&quot;zola-anchor&quot; href=&quot;#compile-and-install&quot; aria-label=&quot;Anchor link for: compile-and-install&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re now ready to compile the Kernel. Run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;make -jN
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where N is the number of jobs allowed at once. Kernel compilation
takes a while. Once the process terminates, you can install the
modules to &lt;code&gt;&#x2F;lib&#x2F;modules&#x2F;linux-5.15-rc5&lt;&#x2F;code&gt; running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; make modules_install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the save the Kernel executable bzImage to &lt;code&gt;&#x2F;boot&#x2F;vmlinuz&lt;&#x2F;code&gt; running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that, by performing the last operation, you don&#x27;t need to
manually execute &lt;code&gt;update-initramfs&lt;&#x2F;code&gt; and update Grub with the new
option. Indeed, you can verify that the new Kernel is the first boot
option reading the content of &lt;code&gt;&#x2F;boot&#x2F;grub&#x2F;grub.cfg&lt;&#x2F;code&gt;. Don&#x27;t worry, you
don&#x27;t need to understand the syntax of this file, you can just search
for the keyword &lt;code&gt;menuentry&lt;&#x2F;code&gt; (the main menu) with the following Awk
one-liner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; awk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;\&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;&#x2F;menuentry &#x2F; {print $2}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; &#x2F;boot&#x2F;grub&#x2F;grub.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The program prints the chars following the string &lt;code&gt;menuentry &#x27;&lt;&#x2F;code&gt;, until
the terminator &lt;code&gt;&#x27;&lt;&#x2F;code&gt;(as specified by the field separator argument &lt;code&gt;-F&lt;&#x2F;code&gt;)
is found, for each occurence of the keyword.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;check-the-lsm-is-working&quot;&gt;Check the LSM is working&lt;a class=&quot;zola-anchor&quot; href=&quot;#check-the-lsm-is-working&quot; aria-label=&quot;Anchor link for: check-the-lsm-is-working&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To boot into the new Kernel we only need to restart the VM. After
that, you can open the terminal and verify that Landlock is running:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;landlock_status.png&quot; width=&quot;700&quot;&gt;
&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A simple way to collaborate with Python developers that do not use Emacs</title>
		<published>2021-02-28T00:00:00+00:00</published>
		<updated>2021-02-28T00:00:00+00:00</updated>
        <summary>&lt;p&gt;In this post I&#x27;ll share some tips to make it easier to setup a
collaborative (Unix-based) Python development environment.&lt;&#x2F;p&gt;
</summary>
		<link href="https://dariofad.github.io/blog/2021-02-28/" type="text/html"/>
		<id>https://dariofad.github.io/blog/2021-02-28/</id>
		<content type="html">&lt;p&gt;In this post I&#x27;ll share some tips to make it easier to setup a
collaborative (Unix-based) Python development environment.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The more you use Emacs, the more you feel uncomfortable when you have
to write something outside it. This is even more true when writing
code. Some months ago I switched to &lt;code&gt;lsp-mode&lt;&#x2F;code&gt;, a client for the
Language Server Protocol that aims to provide IDE-like experience in
Emacs. To me, using &lt;code&gt;lsp-mode&lt;&#x2F;code&gt; has several advantages, including the
ability to quickly write, test and debug small snippets of code
without even touching the mouse.&lt;&#x2F;p&gt;
&lt;p&gt;However, I recognize that anyone has its favourite IDE when it comes
to writing code. I also understand that maybe using Emacs is not a
priority to all of us. As an example, the favourite IDE of some of my
colleagues happens to be Visual Studio Code. To stay productive, we
need to be able to develop in the same environment using different
(and potentially conflicting) setups.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-typical-environment&quot;&gt;The typical environment&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-typical-environment&quot; aria-label=&quot;Anchor link for: the-typical-environment&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Python is a very appealing solution when software needs to be
developed rapidly and there are no particular hardware requirements or
constraints. Complex operations can be done concisely, and there are
libraries for pretty much anything. To use a function that is not
provided by the standard library, we just need to install an external
package running &lt;code&gt;pip install pkg_name&lt;&#x2F;code&gt; and then we are ready to go.&lt;&#x2F;p&gt;
&lt;p&gt;To keep the system clean, and to avoid dependency conflicts between
multiple projects, &lt;em&gt;virtual environments&lt;&#x2F;em&gt; are used. Each virtual
environment (or simply &lt;em&gt;venv&lt;&#x2F;em&gt;) is a directory tree that contains a
Python installation, plus a number of additional packages. To create a
venv, it is only required to type in the terminal the command &lt;code&gt;python -m venv venv_name&lt;&#x2F;code&gt;. To use it instead of the global Python
installation, its enough to enter it and source the terminal with the
command &lt;code&gt;source bin&#x2F;activate&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Virtual environments are the key to make sure that each Python project
is self contained, but sometimes a project relies on a number of
external dependencies or binaries that need to be available
system-wide. To accomodate for this, several build systems can be
used. One of the most common is &lt;strong&gt;GNU make&lt;&#x2F;strong&gt;. &lt;code&gt;make&lt;&#x2F;code&gt; is relevant for a
number of historical reasons, but most importantly, it fits nicely in
a Unix environment, as it can be used to run directly shell
commands. Many large projects use it extensively, as it enables an end
user to build and install a package without knowing the details of how
that is done.&lt;&#x2F;p&gt;
&lt;p&gt;In our typical development environment we use &lt;code&gt;make&lt;&#x2F;code&gt; to setup, build,
execute and test most of the projects. However, we do not use the same
set of tools to code. The ones using VS Code can take advantage of
utils and extensions it provides to set current Python venv and use
the makefiles, while Emacs users need some additional
configuration. This is not really an issue, however, we have to ensure
&lt;strong&gt;the additional configuration files introduced in the repository
don&#x27;t cause conflicts to each other&lt;&#x2F;strong&gt; (i.e., Emacs configuration files
must be transparent to VS Code and viceversa).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;emacs-lsp-mode-venvs&quot;&gt;Emacs, lsp-mode, venvs&lt;a class=&quot;zola-anchor&quot; href=&quot;#emacs-lsp-mode-venvs&quot; aria-label=&quot;Anchor link for: emacs-lsp-mode-venvs&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before going into the details of the setup, I&#x27;ll talk a little bit
about how Emacs can be transformed into an IDE using &lt;code&gt;lsp-mode&lt;&#x2F;code&gt;,
touching only the key points. If you already know how to setup an
Emacs IDE, the following can be skipped.&lt;&#x2F;p&gt;
&lt;p&gt;To act as an IDE, Emacs needs some extensions. There are many packages
that can be used to do that; I use &lt;code&gt;lsp-mode&lt;&#x2F;code&gt;. At high level, it is a
client able to interact with a backend server via asynchronous calls
using the Language Server Procol. The idea is that we can support many
different languages by simply replacing the backend server, and thus
have a configuration that is not language-specific. This basically
means we have to provide a server to Emacs whenever a Python source
file in our project is read into a buffer. Anyway, unlike a
traditional IDE, Emacs by itself is not aware of what a project is,
and thus we have to send it some updates each time we open, close or
switch to project-related file. If you think about it, IDEs like VS
Code or IntelliJ are built on the concept of project, to which they
usually assign the whole window. A good way to address this problem is
to use environment variables, which are accessible to Emacs through
the &lt;code&gt;getenv&lt;&#x2F;code&gt; function. To cut a long story short, I do this using
&lt;code&gt;direnv&lt;&#x2F;code&gt;. This allows me to automatically load&#x2F;unload some environment
variables each time I open a file, kill or switch to a buffer.&lt;&#x2F;p&gt;
&lt;p&gt;In its simplicity, &lt;code&gt;direnv&lt;&#x2F;code&gt; is a fantastic tool. It offers many
standard library function, including some to configure and activate a
Python layout. &lt;code&gt;direnv&lt;&#x2F;code&gt; checks for the existence of an &lt;code&gt;.envrc&lt;&#x2F;code&gt; file
inside the root project directory each time the directory is opened,
and if the file exists, it is loaded and all the environment exported
variables are made available to the current shell. The key point is
that this happens only if the &lt;code&gt;.envrc&lt;&#x2F;code&gt; file is authorized by the user.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;project-setup&quot;&gt;Project setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#project-setup&quot; aria-label=&quot;Anchor link for: project-setup&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The idea is that Emacs and non-Emacs users can use two slightly
different configurations for the same Python project:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Emacs users rely on &lt;code&gt;direnv&lt;&#x2F;code&gt; to setup the local development
environment, and use the &lt;code&gt;make&lt;&#x2F;code&gt; build system for anything else;&lt;&#x2F;li&gt;
&lt;li&gt;non-Emacs users solely rely on the &lt;code&gt;make&lt;&#x2F;code&gt; build system.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first necessity is that both configurations target the same
virtual environment. &lt;&#x2F;p&gt;
&lt;p&gt;To create a venv with &lt;code&gt;direnv&lt;&#x2F;code&gt;, the Emacs user is required to create
the &lt;code&gt;.envrc&lt;&#x2F;code&gt; file (in the root project directory), and add &lt;code&gt;layout python python3&lt;&#x2F;code&gt; as the first line. Running the command &lt;code&gt;direnv allow&lt;&#x2F;code&gt;
immediately causes the &lt;code&gt;.envrc&lt;&#x2F;code&gt; file to be loaded, and the Python3
layout to be created. The venv is by default created in the
&lt;code&gt;.direnv&#x2F;python-$(VERSION)&lt;&#x2F;code&gt; folder, and activated each time the root
project directory is opened.&lt;&#x2F;p&gt;
&lt;p&gt;Non-Emacs user create the venv using a Makefile rule. We only
need to ensure the venv path matches the default one used by
direnv. To do that, we declare in the makefile the variable &lt;code&gt;VENVNAME := $(subst P,p,$(subst $(space),-,$(shell python3 --version)))&lt;&#x2F;code&gt;, where
&lt;code&gt;space&lt;&#x2F;code&gt; is the literal &lt;code&gt;$() $()&lt;&#x2F;code&gt;. To create the venv, the non-Emacs
user can run the recipe &lt;code&gt;install&lt;&#x2F;code&gt;, defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;test -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VIRTUALENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;VIRTUALENV&lt;&#x2F;code&gt; is defined as &lt;code&gt;VIRTUALENV := python3 -m venv .direnv&#x2F;$(VENVNAME) &lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-app&quot;&gt;Python app&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-app&quot; aria-label=&quot;Anchor link for: python-app&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point both the Emacs and non-Emacs users are working in the
same venv. The only difference we have to keep in mind is that the
Emacs user&#x27;s venv is activated by default.&lt;&#x2F;p&gt;
&lt;p&gt;Now we have to provide a method to install Python requirements. To
avoid confusion, the &lt;code&gt;install&lt;&#x2F;code&gt; rule can be reused, adding to the
recipe the required steps:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;REQUIREMENTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;test -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VIRTUALENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$@ --upgrade&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$@ -r $&amp;lt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;REQUIREMENTS&lt;&#x2F;code&gt; is the file &lt;code&gt;$ROOT_DIR&#x2F;requirements.txt&lt;&#x2F;code&gt;.
Running &lt;code&gt;make install&lt;&#x2F;code&gt; doesn&#x27;t cause any problem to the Emacs user
since there is no modification to the Python executable path.&lt;&#x2F;p&gt;
&lt;p&gt;To run the application we provide the &lt;code&gt;run&lt;&#x2F;code&gt; recipe, which has
&lt;code&gt;install&lt;&#x2F;code&gt; as a prerequisite (if requirements.txt is updated then the
newly introduced requirements will automatically be installed each
time the app is executed).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;APP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;APP&lt;&#x2F;code&gt; is defined as &lt;code&gt;APP := app_launcher.py&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As a final step, we can provide a rule to clean the venv when
needed. This is done by &lt;code&gt;clean&lt;&#x2F;code&gt;, defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rm -rf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;*&#x2F;__pycache__&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -delete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__pycache__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -delete
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;system-wide-dependencies&quot;&gt;System-wide dependencies&lt;a class=&quot;zola-anchor&quot; href=&quot;#system-wide-dependencies&quot; aria-label=&quot;Anchor link for: system-wide-dependencies&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Usually a project relies on some libraries or binaries that need to be
available system-wide. However, I try to keep my system as close to a
vanilla distribution as much as I can, trying to avoid the dependency
hell. What I typically do is install all the required binaries in the
directory &lt;code&gt;$ROOT_DIR&#x2F;bin&lt;&#x2F;code&gt;, which is then added to the &lt;code&gt;$PATH&lt;&#x2F;code&gt;
environment variable. This can be done easily using &lt;code&gt;direnv&lt;&#x2F;code&gt; with
&lt;code&gt;PATH_add&lt;&#x2F;code&gt;, a function that prepends an input path to the &lt;code&gt;PATH&lt;&#x2F;code&gt;
environment variable. This is really a killer feature, as &lt;code&gt;direnv&lt;&#x2F;code&gt; not
only adds the input path when the project is opened, but it also
removes it when the project is closed, keeping my global &lt;code&gt;PATH&lt;&#x2F;code&gt; clean.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I recommend to install software dependencies using Makefile
rules. It is a bad practice to use &lt;code&gt;direnv&lt;&#x2F;code&gt; to perform time consuming
operations. Not only if &lt;code&gt;direnv&lt;&#x2F;code&gt; takes too much Emacs may hang, but
also other programs might crash (e.g., git might crash if different
commands are executed simultaneously, causing the local content to be
corrupted). Therefore, I use &lt;code&gt;direnv&lt;&#x2F;code&gt; only to create the project
directory structure, add paths to the global environment, and check if
a software dependency is available (sending a message to the user
otherwise). This is done using the function &lt;code&gt;has&lt;&#x2F;code&gt;, as detailed in the
following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# add bin to path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PATH_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# required dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;binary_deps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dep1&amp;quot; &amp;quot;dep2&amp;quot; &amp;quot;dep3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# warn the user if a dependency is missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; dep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;binary_deps[@]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;has &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;missing dependency &amp;#39;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;}&amp;#39;, to install it run &amp;#39;make install_binaries&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Non-Emacs users can export &lt;code&gt;bin&lt;&#x2F;code&gt; to the global path adding to the
Makefile the following line.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PATH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; printenv PATH)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(ROOT_DIR)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(LOCAL_BINARIES)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last change won&#x27;t affect &lt;code&gt;direnv&lt;&#x2F;code&gt; users, as it only adds a
duplicate to the PATH. There also other solutions (e.g., exploiting
the functionality provided by the dynamic linker), but this is the
most straightforward to me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;envrc&quot;&gt;.envrc&lt;a class=&quot;zola-anchor&quot; href=&quot;#envrc&quot; aria-label=&quot;Anchor link for: envrc&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The final version of the &lt;code&gt;.envrc&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# create a python3 layout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;layout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; python python3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# create directory to store the local binaries and add it to the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PATH_add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# required dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;binary_deps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;dep1&amp;quot; &amp;quot;dep2&amp;quot; &amp;quot;dep3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# warn the user if a dependency is missing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; dep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;binary_deps[@]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;has &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# (do not use the .envrc to install binaries, use Makefile instead...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;#  ... if the .envrc blocks, other tools might hang or break, e.g. emacs or git)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;missing dependency &amp;#39;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;}&amp;#39;, to install it run &amp;#39;make install_binaries&amp;#39;&amp;quot;	
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;makefile&quot;&gt;Makefile&lt;a class=&quot;zola-anchor&quot; href=&quot;#makefile&quot; aria-label=&quot;Anchor link for: makefile&quot;&gt;#&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The final version of the &lt;code&gt;Makefile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;.PHONY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;all clean remove_binaries install_binaries install run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# literal to define whitespace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$() $()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# make the venv path name matches the default name used by direnv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENVNAME       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;subst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;P,p,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;subst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;,-,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;python3 --version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VIRTUALENV     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;python3 -m venv .direnv&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENVNAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ROOT_DIR       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;realpath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;firstword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;MAKEFILE_LIST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;strip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ROOT_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;.direnv&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENVNAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ACTIVATE       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;bin&#x2F;python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIP            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt; -m pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;SHELL          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_BINARIES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;REQUIREMENTS   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;requirements.txt      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# insert here your python requirements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;APP            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;app_launcher.py	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# this file is used as the main app driver
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# add .&#x2F;bin to the path
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; PATH &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;printenv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ROOT_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_BINARIES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;run				&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# install python deps run the project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:					&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# clean python dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rm -rf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;*&#x2F;__pycache__&#x2F;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -delete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;#39;__pycache__&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -delete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;remove_binaries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:			&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# remove local binaries
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;rm -rf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_BINARIES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;install_binaries&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;:			&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# use this rule to install local binaries in .&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ROOT_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;LOCAL_BINARIES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Installing required binaries locally...&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;...DONE&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;Remember to ADD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;ROOT_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&#x2F;bin to the current PATH&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;**ONLY if you are NOT USING direnv**.&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;&amp;quot;To do that run &amp;#39;make export_path&amp;#39;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;REQUIREMENTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# install python venv (with all required packages)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;test -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VIRTUALENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;VENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$@ --upgrade&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PIP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;$@ -r $&amp;lt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5cb3fa;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#adb7c9;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9acc76;&quot;&gt;install 				&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5f697a;&quot;&gt;# run project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#db9d63;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5ebfcc;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;PYTHON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;) $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;APP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cd74e8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>